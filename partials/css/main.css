@charset "UTF-8";
/* ==========================================================================
   Index of scss files
   ========================================================================== */
/* Normalize
   ========================================================================== */
/*! normalize.css v2.1.2 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
@import url(https://fonts.googleapis.com/css?family=Roboto:400,100italic,300,300italic,400italic,500,500italic,700,700italic,900,900italic,100&subset=latin,latin-ext);
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/**
 * Apply a natural box layout model to all elements
 */
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0;
  padding: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/**
 * Add max width to img in figure
 */
figure img {
  max-width: 100%; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 * 4. Remove outline
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
  outline: none;
  /* 4 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

input,
select,
textarea {
  margin: 0;
  font-family: inherit;
  font-size: inherit; }
  input:focus,
  select:focus,
  textarea:focus {
    outline: none; }

textarea {
  resize: none; }

/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/* External fonts
   ========================================================================== */
@font-face {
  font-family: 'fontello';
  src: url("../fonts/fontello.eot?98066248");
  src: url("../fonts/fontello.eot?98066248#iefix") format("embedded-opentype"), url("../fonts/fontello.woff?98066248") format("woff"), url("../fonts/fontello.ttf?98066248") format("truetype"), url("../fonts/fontello.svg?98066248#fontello") format("svg");
  font-weight: normal;
  font-style: normal; }

/* Chrome hack: SVG is rendered more smooth in Windozze. 100% magic, uncomment if you need it. */
/* Note, that will break hinting! In other OS-es font will be not as sharp as it could be */
/*
@media screen and (-webkit-min-device-pixel-ratio:0) {
  @font-face {
    font-family: 'fontello';
    src: url('../fonts/fontello.svg?98066248#fontello') format('svg');
  }
}
*/
[class^="icon-"]:before, [class*=" icon-"]:before {
  font-family: "fontello";
  font-style: normal;
  font-weight: normal;
  speak: none;
  display: inline-block;
  text-decoration: inherit;
  width: 1em;
  margin-right: .2em;
  text-align: center;
  /* opacity: .8; */
  /* For safety - reset parent styles, that can break glyph codes*/
  font-variant: normal;
  text-transform: none;
  /* fix buttons height, for twitter bootstrap */
  line-height: 1em;
  /* Animation center compensation - margins should be symmetric */
  /* remove if not needed */
  margin-left: .2em;
  /* you can be more comfortable with increased icons size */
  /* font-size: 120%; */
  /* Font smoothing. That was taken from TWBS */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  /* Uncomment for 3D effect */
  /* text-shadow: 1px 1px 1px rgba(127, 127, 127, 0.3); */ }

.icon--open-big--left:before {
  content: '\e816'; }

/* '' */
.icon--open-big--right:before {
  content: '\e815'; }

/* '' */
.icon--open-big--up:before {
  content: '\e814'; }

/* '' */
.icon--open-big--down:before {
  content: '\e812'; }

/* '' */
.icon--angle--left:before {
  content: '\e801'; }

/* '' */
.icon--angle--right:before {
  content: '\e803'; }

/* '' */
.icon--angle--up:before {
  content: '\e80a'; }

/* '' */
.icon--angle--down:before {
  content: '\e820'; }

/* '' */
.icon--up-micro:before {
  content: '\e81e'; }

/* '' */
.icon--down-micro:before {
  content: '\e81f'; }

/* '' */
.icon--plus:before {
  content: '\e81d'; }

/* '' */
.icon--resize:before {
  content: '\e817'; }

/* '' */
.icon--phone:before {
  content: '\e800'; }

/* '' */
.icon--clock:before {
  content: '\e81b'; }

/* '' */
.icon--key:before {
  content: '\e813'; }

/* '' */
.icon--folder:before {
  content: '\e81c'; }

/* '' */
.icon--folder--alt:before {
  content: '\e807'; }

/* '' */
.icon--upload:before {
  content: '\e81a'; }

/* '' */
.icon--download:before {
  content: '\e819'; }

/* '' */
.icon--code:before {
  content: '\e818'; }

/* '' */
.icon--list:before {
  content: '\e805'; }

/* '' */
.icon--label:before {
  content: '\e80d'; }

/* '' */
.icon--labels:before {
  content: '\e804'; }

/* '' */
.icon--bug:before {
  content: '\e806'; }

/* '' */
.icon--display-mode:before {
  content: '\e808'; }

/* '' */
.icon--display-mode--alt:before {
  content: '\e809'; }

/* '' */
.icon--picture:before {
  content: '\e80b'; }

/* '' */
.icon--pencil:before {
  content: '\e80e'; }

/* '' */
.icon--trash:before {
  content: '\e810'; }

/* '' */
.icon--warning:before {
  content: '\e811'; }

/* '' */
.icon--lock--open:before {
  content: '\e821'; }

/* '' */
.icon--lock:before {
  content: '\e822'; }

/* '' */
.icon--file--code:before {
  content: '\e823'; }

/* '' */
.icon--file--image:before {
  content: '\e824'; }

/* '' */
.icon--reload:before {
  content: '\e825'; }

/* '' */
.icon--comment:before {
  content: '\e826'; }

/* '' */
.icon--check:before {
  content: '\e827'; }

/* '' */
/* Variables (colors, sizes, fonts)
   ========================================================================== */
/* ==========================================================================
   Variables: colors, sizes, fonts
   ========================================================================== */
/* Colors
========================================================================== */
/* Sizes
========================================================================== */
/* Breakpoints
========================================================================== */
/* Fonts
========================================================================== */
/* Mixins
   ========================================================================== */
/* ==========================================================================
   Mixins
   ========================================================================== */
/* 1. Mixin
========================================================================== */
/* Extends
   ========================================================================== */
/* ==========================================================================
   Extends
   ========================================================================== */
#kss-node .kss-wrapper {
  width: 100%; }

/* Place for helper classes to use for extending other modules.
   ========================================================================== */
.font--normal {
  font-family: "Roboto", Arial, sans-serif; }
  .font--normal--100 {
    font-weight: 100; }
  .font--normal--300 {
    font-weight: 300; }
  .font--normal--400 {
    font-weight: 400; }
  .font--normal--500 {
    font-weight: 500; }
  .font--normal--700 {
    font-weight: 700; }
  .font--normal--900 {
    font-weight: 900; }

.color_white {
  border: 1px solid #f4f4f4;
  background: #fff; }

.color_grey_0 {
  background: #e5e5e5; }

.color_grey_1 {
  background: #d5d5d5; }

.color_grey_2 {
  background: #c4c4c4; }

.color_grey_3 {
  background: #b2b2b2; }

.color_grey_4 {
  background: #7f7f7f; }

.color_grey_5 {
  background: #121212; }

.color_black {
  background: #000; }

.color_green {
  background: #6dc729; }

.color_blue {
  background: #4f7dc1; }

.color_purple {
  background: #a96dbc; }

.color_red {
  background: #e65962; }
  .color_red_dark {
    background: #d64650; }

/* Helpers (common used classes: buttons, clearfix...)
   ========================================================================== */
/* ==========================================================================
   Helpers
   ========================================================================== */
/* Layout oriented helpers
   ========================================================================== */
.sec--head,
.sec--main,
.sec--popup,
.subsec, .sec--main__head,
.sec--main__content {
  display: flex;
  max-width: 100%;
  flex-wrap: wrap;
  flex-basis: 100%; }

.sec--head__inner,
.sec--main__inner,
.sec--popup__inner,
.subsec__inner {
  width: 1025px;
  padding: 30px 0; }

@media (max-width: 1100px) {
  .sec--head__inner,
  .sec--main__inner,
  .sec--popup__inner,
  .subsec__inner {
    width: 100%;
    padding-right: 30px;
    padding-left: 30px; } }

@media (max-width: 767px) {
  .sec--head__inner,
  .sec--main__inner,
  .sec--popup__inner,
  .subsec__inner {
    padding-top: 20px;
    padding-right: 15px;
    padding-bottom: 20px;
    padding-left: 15px; } }

/* Content helpers
   ========================================================================== */
.btn {
  padding: 0;
  border: none;
  border: none;
  border-radius: 0;
  background: transparent;
  box-shadow: none; }

.action-teaser .teaser__head:after,
.project-teaser .teaser__head:after, .files-list__item__id .ticket-id-link:after, .files-list > li__id .ticket-id-link:after, .files-list__item__counter:after, .files-list > li__counter:after, .pagination__content:after, .trigger-close-popup:after, .icheckbox:before, .project-action-form .form__fieldset .field .label,
.project-action-form .form__fieldset .NFI-wrapper .label, .files-list__item__counter:before, .files-list > li__counter:before, .comment-box__content .qty {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto; }

.action-tool__info, .access-tool__info, .action-tool__info .tooltip, .access-tool__info .tooltip, .icheckbox, .icheckbox:before, .access-form .form__content .field, .sec--head, .sec--head__inner, .cloud-tooltip-list__item > a, .btn, .user-btn, .action-btn, .action-tool__content, .action-tools-list__item .action-tool__content:before, .user-box__content .icon, .user-box__actions .cloud-tooltip, .teaser__content, .teaser__content .update-info, .template-teaser .teaser__head .action-tools-list, .template-teaser .teaser__content .project-title, .template-teaser .teaser__content .action-tools-list, .template-teaser .teaser__actions, .template-teaser .teaser__actions .action-tool, .file-data__name,
.file-data__extention,
.file-data__size,
.file-data__uploaded-date,
.file-data__actions,
.file-data__status,
.file-data__create-date,
.file-data__finish-date,
.file-data__comments,
.file-data__ticket-date, .files-list__item__inner, .files-list > li__inner, .pagination__content, .access-tool__content, .form-info, .dispaly-mode__content, .upload-box__content__head .icon, .upload-box__content__head .icon-wrapper .qty {
  transition: 170ms ease; }

.page-back__content .main-title:before, .action-tools-list__item .action-tool__content:before, .action-teaser .teaser__head:after,
.project-teaser .teaser__head:after, .files-list__item__id .ticket-id-link:after, .files-list > li__id .ticket-id-link:after, .files-list__item__counter:after, .files-list > li__counter:after, .pagination__content:after, .trigger-close-popup:after {
  display: block;
  content: ''; }

.page-back__content .main-title:before, .action-tools-list__item .action-tool__content:before {
  position: absolute; }

.sec--head,
.sec--main,
.sec--popup,
.subsec, .sec--main__head,
.sec--main__content, body, .access-form .form__content, .access-form .form__actions, .subsec__content, .page-back__info, .progress-bar-wrapper, .project-box__content,
.project-box__actions, .access-box__head,
.access-box__content, .dispaly-mode-box__info, .upload-box__content, .upload-box__content__head,
.upload-box__content__info-add, .status-label .label, .extention-label .label, .icheckbox:before, .customSelect:after, .project-action-form .NFI-button, .project-action-form .form__fieldset .field .label,
.project-action-form .form__fieldset .NFI-wrapper .label, .create-ticket-form .form__fieldset .NFI-wrapper .NFI-button, .create-ticket-form .form__fieldset .field .label--special, .sec--popup__inner, .icon:before, .icon--close:before, .tooltip .label, .tooltip:before, .cloud-tooltip__icon, .cloud-tooltip__icon .icon, .cloud-tooltip__icon .icon:before, .btn, .user-btn, .action-btn__content, .page-back__content, .update-info .label, .action-tool__content, .user-box__content, .teaser__head, .teaser__content, .project-teaser .teaser__content .project-title, .template-teaser .teaser__content .project-title, .template-teaser .teaser__content .action-tools-list__item, .file-data--template-complexe .file-data__actions .icon, .ticket-id-link, .files-list__item__counter:before, .files-list > li__counter:before, .pagination__content, .pagination-list, .pagination-box, .project-time-list, .access-tool__content, .access-tools-list, .dispaly-mode__content, .dispaly-mode .icon, .upload-box__content__head .icon, .upload-box__content__head .icon--folder--alt, .upload-box__content__head .icon--folder--alt:before, .upload-box__content__head .icon-wrapper, .upload-box__content__head .icon-wrapper .qty, .comment-box__content, .comment-box__content .icon--comment, .comment-box__content .qty, .trigger-close-popup, .sec--head__inner, .subsec__head, .popup__head, .teasers-list, .display-mode-list, .customSelect, .form-box, .checkboxes-list, .checkboxes-list .field, .sec--head__box, .breadcrumbs, .breadcrumbs__item, .page-back__content .icon--open-big--left:before, .action-tools-list, .file-data__inner, .file-data__name,
.file-data__extention,
.file-data__size,
.file-data__uploaded-date,
.file-data__actions,
.file-data__status,
.file-data__create-date,
.file-data__finish-date,
.file-data__comments,
.file-data__ticket-date, .files-list__item, .files-list > li, .files-list__item__inner, .files-list > li__inner, .files-box__head, .files-box__name,
.files-box__extention,
.files-box__size,
.files-box__uploaded-date,
.files-box__actions,
.files-box__status,
.files-box__create-date,
.files-box__finish-date, .access-form .form__actions .field--cta, .create-ticket-form .form__actions, .teaser__actions, .update-info__content, .file-data--tickets .file-data__status .status-label, .files-list__item__id, .files-list > li__id, .project-action-form, .project-teaser .teaser__content {
  display: flex; }

.sec--head,
.sec--main,
.sec--popup,
.subsec, .sec--main__head,
.sec--main__content, body, .access-form .form__content, .access-form .form__actions, .subsec__content, .page-back__info, .progress-bar-wrapper, .project-box__content,
.project-box__actions, .access-box__head,
.access-box__content, .dispaly-mode-box__info, .upload-box__content, .upload-box__content__head,
.upload-box__content__info-add, .teasers-list, .display-mode-list, .access-form .form__actions .field--cta {
  align-items: flex-start;
  align-content: flex-start; }

.status-label .label, .extention-label .label, .icheckbox:before, .customSelect:after, .project-action-form .NFI-button, .project-action-form .form__fieldset .field .label,
.project-action-form .form__fieldset .NFI-wrapper .label, .create-ticket-form .form__fieldset .NFI-wrapper .NFI-button, .create-ticket-form .form__fieldset .field .label--special, .sec--popup__inner, .icon:before, .icon--close:before, .tooltip .label, .tooltip:before, .cloud-tooltip__icon, .cloud-tooltip__icon .icon, .cloud-tooltip__icon .icon:before, .btn, .user-btn, .action-btn__content, .page-back__content, .update-info .label, .action-tool__content, .user-box__content, .teaser__head, .teaser__content, .project-teaser .teaser__content .project-title, .template-teaser .teaser__content .project-title, .template-teaser .teaser__content .action-tools-list__item, .file-data--template-complexe .file-data__actions .icon, .ticket-id-link, .files-list__item__counter:before, .files-list > li__counter:before, .pagination__content, .pagination-list, .pagination-box, .project-time-list, .access-tool__content, .access-tools-list, .dispaly-mode__content, .dispaly-mode .icon, .upload-box__content__head .icon, .upload-box__content__head .icon--folder--alt, .upload-box__content__head .icon--folder--alt:before, .upload-box__content__head .icon-wrapper, .upload-box__content__head .icon-wrapper .qty, .comment-box__content, .comment-box__content .icon--comment, .comment-box__content .qty, .trigger-close-popup, .sec--head__inner, .subsec__head, .popup__head, .customSelect, .form-box, .checkboxes-list, .checkboxes-list .field, .sec--head__box, .breadcrumbs, .breadcrumbs__item, .page-back__content .icon--open-big--left:before, .action-tools-list, .file-data__inner, .file-data__name,
.file-data__extention,
.file-data__size,
.file-data__uploaded-date,
.file-data__actions,
.file-data__status,
.file-data__create-date,
.file-data__finish-date,
.file-data__comments,
.file-data__ticket-date, .files-list__item, .files-list > li, .files-list__item__inner, .files-list > li__inner, .files-box__head, .files-box__name,
.files-box__extention,
.files-box__size,
.files-box__uploaded-date,
.files-box__actions,
.files-box__status,
.files-box__create-date,
.files-box__finish-date, .create-ticket-form .form__actions, .teaser__actions {
  align-items: center;
  align-content: center; }

.sec--head,
.sec--main,
.sec--popup,
.subsec, .sec--main__head,
.sec--main__content, body, .access-form .form__content, .access-form .form__actions, .subsec__content, .page-back__info, .progress-bar-wrapper, .project-box__content,
.project-box__actions, .access-box__head,
.access-box__content, .dispaly-mode-box__info, .upload-box__content, .upload-box__content__head,
.upload-box__content__info-add, .status-label .label, .extention-label .label, .icheckbox:before, .customSelect:after, .project-action-form .NFI-button, .project-action-form .form__fieldset .field .label,
.project-action-form .form__fieldset .NFI-wrapper .label, .create-ticket-form .form__fieldset .NFI-wrapper .NFI-button, .create-ticket-form .form__fieldset .field .label--special, .sec--popup__inner, .icon:before, .icon--close:before, .tooltip .label, .tooltip:before, .cloud-tooltip__icon, .cloud-tooltip__icon .icon, .cloud-tooltip__icon .icon:before, .btn, .user-btn, .action-btn__content, .page-back__content, .update-info .label, .action-tool__content, .user-box__content, .teaser__head, .teaser__content, .project-teaser .teaser__content .project-title, .template-teaser .teaser__content .project-title, .template-teaser .teaser__content .action-tools-list__item, .file-data--template-complexe .file-data__actions .icon, .ticket-id-link, .files-list__item__counter:before, .files-list > li__counter:before, .pagination__content, .pagination-list, .pagination-box, .project-time-list, .access-tool__content, .access-tools-list, .dispaly-mode__content, .dispaly-mode .icon, .upload-box__content__head .icon, .upload-box__content__head .icon--folder--alt, .upload-box__content__head .icon--folder--alt:before, .upload-box__content__head .icon-wrapper, .upload-box__content__head .icon-wrapper .qty, .comment-box__content, .comment-box__content .icon--comment, .comment-box__content .qty, .trigger-close-popup {
  justify-content: center; }

.access-form .form__actions .field--cta, .create-ticket-form .form__actions, .teaser__actions {
  justify-content: flex-end; }

.sec--head__inner, .subsec__head, .popup__head {
  justify-content: space-between; }

.update-info__content, .file-data--tickets .file-data__status .status-label, .files-list__item__id, .files-list > li__id {
  align-content: stretch;
  align-items: stretch; }

.project-action-form, .project-teaser .teaser__content {
  flex-wrap: wrap;
  align-items: stretch;
  align-content: space-between; }

.checkboxes-list, .breadcrumbs, .cloud-tooltip-list, .action-tools-list, .teasers-list, .files-list, .pagination-list, .project-time-list, .access-tools-list, .display-mode-list {
  margin: 0;
  padding: 0;
  list-style: none; }

/* Apparence helpers
   ========================================================================== */
.action-teaser .teaser__head,
.project-teaser .teaser__head, .files-list__item__id .ticket-id-link, .files-list > li__id .ticket-id-link, .files-list__item__counter, .files-list > li__counter, .pagination__content, .trigger-close-popup {
  position: relative; }
  .action-teaser .teaser__head:after,
  .project-teaser .teaser__head:after, .files-list__item__id .ticket-id-link:after, .files-list > li__id .ticket-id-link:after, .files-list__item__counter:after, .files-list > li__counter:after, .pagination__content:after, .trigger-close-popup:after {
    width: 1px;
    height: 1px;
    transition: 200ms ease-in-out, border-radius 200ms linear;
    border-radius: 50%;
    background: transparent; }

.action-teaser .teaser__inner:hover .teaser__head:after,
.project-teaser .teaser__inner:hover .teaser__head:after, .action-teaser.active .teaser__head:after, .files-list__item a.files-list__item__inner:hover .files-list__item__counter:after, .files-list > li a.files-list__item__inner:hover .files-list__item__counter:after, .files-list__item__id .ticket-id-link:hover:after, .files-list > li__id .ticket-id-link:hover:after, .pagination__content:hover:after, .trigger-close-popup:hover:after {
  top: -25%;
  right: -25%;
  bottom: -25%;
  left: -25%;
  width: 150%;
  height: 150%; }

.status-label, .extention-label {
  display: inline-block;
  background: #c4c4c4; }
  .status-label .label, .extention-label .label {
    height: 44px;
    margin: 0;
    padding: 0 15px;
    font-size: 14px;
    font-weight: 500;
    line-height: 1;
    text-transform: uppercase;
    color: #fff; }

.action-tool__info, .access-tool__info {
  position: absolute;
  z-index: 2;
  right: -50%;
  bottom: 0;
  left: -50%;
  display: none;
  height: 1px;
  opacity: 0;
  background: transparent;
  justify-content: center; }
  .action-tool__info .tooltip, .access-tool__info .tooltip {
    margin-top: 15px;
    opacity: 0; }

.action-tool:hover .action-tool__info, .access-tool:hover .access-tool__info {
  display: flex;
  opacity: 1; }
  .action-tool:hover .action-tool__info .tooltip, .access-tool:hover .access-tool__info .tooltip {
    opacity: 1; }

/* Typograpy
   ========================================================================== */
/* ==========================================================================
   Typography
   ========================================================================== */
/* Base
   ========================================================================== */
body {
  position: relative;
  width: 100%;
  min-width: 320px;
  font-family: "Roboto", Arial, sans-serif;
  font-size: 12px;
  line-height: 1.4;
  color: #404040;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  flex-wrap: wrap; }

/* Global Typography
   ========================================================================== */
a {
  text-decoration: none;
  color: #404040; }
  a:hover {
    text-decoration: underline; }

/* Forms
   ========================================================================== */
/* ==========================================================================
   Forms
   ========================================================================== */
.access-form fieldset, .project-action-form fieldset, .create-ticket-form fieldset {
  margin: 0;
  padding: 0;
  border: 0; }

.access-form input,
.project-action-form input,
.create-ticket-form input,
.access-form textarea, .project-action-form textarea, .create-ticket-form textarea {
  border-radius: 0;
  -webkit-appearance: none; }
  .access-form input:focus,
  .project-action-form input:focus,
  .create-ticket-form input:focus,
  .access-form textarea:focus, .project-action-form textarea:focus, .create-ticket-form textarea:focus {
    outline: none; }

.access-form *::-ms-clear, .project-action-form *::-ms-clear, .create-ticket-form *::-ms-clear {
  display: none; }

/* Custom checkboxes
   ========================================================================== */
.icheckbox {
  width: 20px;
  height: 20px;
  cursor: pointer;
  border: 1px solid #9a9a9a;
  border-radius: 2px;
  background: #fff; }
  .icheckbox:before {
    width: 100%;
    height: 100%;
    font-family: "fontello";
    font-size: 14px;
    content: '\e827';
    opacity: 0;
    color: #d64650; }
  .icheckbox.checked {
    position: relative;
    border-color: #d64650;
    background: linear-gradient(to bottom, #e32c49 0%, #d4213e 100%); }
    .icheckbox.checked:before {
      opacity: 1;
      color: #fff; }

@media (max-width: 1100px) {
  .icheckbox {
    width: 15px;
    height: 15px; }
    .icheckbox:before {
      font-size: 10px; } }

@media (max-width: 767px) {
  .icheckbox {
    width: 13px;
    height: 13px; } }

/* Custom selects
   ========================================================================== */
.hasCustomSelect {
  z-index: 2;
  width: 330px;
  height: 48px; }

.customSelect {
  z-index: 1;
  display: flex !important;
  overflow: hidden;
  width: 100%;
  height: 48px;
  padding: 0 40px 0 15px;
  white-space: nowrap;
  text-overflow: ellipsis;
  border: 1px solid #e5e5e5; }
  .customSelect:after {
    position: absolute;
    top: 0;
    right: 0;
    width: 40px;
    height: 100%;
    margin: auto 0;
    font-family: "fontello";
    font-size: 12px;
    content: '\e81f';
    color: #d64650;
    border: 1px solid #e5e5e5;
    border-left: none;
    background: #f9f9f9; }

.customSelectInner {
  overflow: hidden;
  max-width: 100%;
  white-space: nowrap;
  text-overflow: ellipsis; }

/* Access form
   ========================================================================== */
.access-form {
  width: 330px; }
  .access-form ::-webkit-input-placeholder {
    font-weight: 500; }
  .access-form :-moz-placeholder {
    font-weight: 500;
    /* Firefox 18- */ }
  .access-form ::-moz-placeholder {
    font-weight: 500;
    /* Firefox 19+ */ }
  .access-form :-ms-input-placeholder {
    font-weight: 500; }
  .access-form .form__section {
    width: 100%; }
    .access-form .form__section .field + .field--info,
    .access-form .form__section .btn + .field--info {
      margin-top: 0;
      opacity: 0; }
      .access-form .form__section .field + .field--info .form-info,
      .access-form .form__section .btn + .field--info .form-info {
        height: 0; }
    .access-form .form__section .field:not(.field--info):not(.field--cta) {
      border: 1px solid transparent; }
    .access-form .form__section.error-message .field + .field--info,
    .access-form .form__section.error-message .btn + .field--info {
      margin-top: 15px;
      opacity: 1; }
      .access-form .form__section.error-message .field + .field--info .form-info,
      .access-form .form__section.error-message .btn + .field--info .form-info {
        height: 15px; }
    .access-form .form__section.error-message .field:not(.field--info):not(.field--cta) {
      border: 1px solid #e65962; }
  .access-form .form__content {
    flex-wrap: wrap; }
    .access-form .form__content .field {
      width: 100%; }
      .access-form .form__content .field .input {
        width: 100%;
        height: 48px;
        padding: 0 15px;
        font-size: 14px;
        font-weight: 500;
        color: #000;
        border: none;
        border: 1px solid #d5d5d5;
        background: #d5d5d5; }
        .access-form .form__content .field .input ::-webkit-input-placeholder,
        .access-form .form__content .field .input input:-moz-placeholder {
          color: red; }
        .access-form .form__content .field .input:focus {
          border-color: #b2b2b2;
          box-shadow: 0 0 15px 1px rgba(0, 0, 0, 0.1) inset; }
  .access-form .form__actions {
    flex-wrap: wrap; }
    .access-form .form__actions .btn {
      width: 100%; }
  .access-form .form__content + .form__actions {
    margin-top: 15px; }
  .access-form .field + .field,
  .access-form .form__section + .form__section,
  .access-form .btn + .field {
    margin-top: 15px; }
  .access-form .field + .field--cta,
  .access-form .btn + .field--cta {
    margin-top: calc(15px * 2); }

@media (max-width: 767px) {
  .access-form {
    width: 100%; }
    .access-form .btn--submit {
      width: 100%; }
    .access-form .form__content .field .input {
      font-size: 12px; } }

/* project-action-form
   ========================================================================== */
.project-action-form {
  width: 100%;
  height: 48px;
  justify-content: center; }
  .project-action-form .NFI-filename {
    display: none !important; }
  .project-action-form .NFI-button {
    display: flex !important;
    color: #adadad; }
    .project-action-form .NFI-button input {
      height: auto !important; }
  .project-action-form .form__fieldset {
    width: 100%; }
    .project-action-form .form__fieldset .NFI-wrapper {
      z-index: 10;
      overflow: hidden !important;
      cursor: pointer; }
    .project-action-form .form__fieldset .field,
    .project-action-form .form__fieldset .NFI-wrapper {
      position: relative;
      width: 100%; }
      .project-action-form .form__fieldset .field .label,
      .project-action-form .form__fieldset .field .input,
      .project-action-form .form__fieldset .field .NFI-button,
      .project-action-form .form__fieldset .NFI-wrapper .label,
      .project-action-form .form__fieldset .NFI-wrapper .input,
      .project-action-form .form__fieldset .NFI-wrapper .NFI-button {
        width: 100%;
        font-size: 20px;
        font-weight: 300;
        transition: 300ms ease;
        text-align: center; }
      .project-action-form .form__fieldset .field .label,
      .project-action-form .form__fieldset .NFI-wrapper .label {
        z-index: 9;
        margin: 0; }
      .project-action-form .form__fieldset .field .input,
      .project-action-form .form__fieldset .field .NFI-button,
      .project-action-form .form__fieldset .NFI-wrapper .input,
      .project-action-form .form__fieldset .NFI-wrapper .NFI-button {
        position: relative;
        z-index: -1;
        height: 48px;
        margin-top: 0;
        padding: 0 15px;
        pointer-events: none;
        opacity: 0;
        border: none; }
  .project-action-form.active .form__fieldset .field .label {
    top: -60px;
    font-size: 16px;
    color: #e65962; }
  .project-action-form.active .form__fieldset .field .input,
  .project-action-form.active .form__fieldset .field .NFI-button {
    z-index: 2;
    pointer-events: auto;
    opacity: 1; }
  .project-action-form.active .form__fieldset .field .input {
    margin-top: 20px; }

/* create-ticket-form
   ========================================================================== */
.form-box__section {
  flex-grow: 1; }
  .form-box__section__head + .form-box__section__content {
    margin-top: 15px; }

.checkboxes-list {
  margin-right: -15px; }
  .checkboxes-list__item {
    margin-right: 15px; }
  .checkboxes-list .field .label {
    margin-right: 10px;
    order: -1; }

.create-ticket-form .form__fieldset {
  width: 100%; }
  .create-ticket-form .form__fieldset .NFI-wrapper {
    display: flex !important; }
    .create-ticket-form .form__fieldset .NFI-wrapper .NFI-filename {
      padding: 0;
      padding: 0 15px !important;
      border: none;
      border: 1px solid #e5e5e5;
      border-right: none;
      order: 1;
      flex-grow: 1; }
    .create-ticket-form .form__fieldset .NFI-wrapper .NFI-button {
      display: flex !important;
      width: calc(330px / 2);
      text-indent: -99998em;
      background: #e65962;
      flex-shrink: 0;
      order: 2; }
  .create-ticket-form .form__fieldset .field {
    position: relative; }
    .create-ticket-form .form__fieldset .field--select {
      width: 330px; }
    .create-ticket-form .form__fieldset .field .input--text,
    .create-ticket-form .form__fieldset .field .input--url,
    .create-ticket-form .form__fieldset .field .textarea {
      width: 100%;
      border: 1px solid #e5e5e5; }
    .create-ticket-form .form__fieldset .field .input {
      height: 48px; }
      .create-ticket-form .form__fieldset .field .input--text,
      .create-ticket-form .form__fieldset .field .input--url {
        padding: 0 15px; }
      .create-ticket-form .form__fieldset .field .input.NFI-wrapper {
        padding: 0;
        border: none; }
    .create-ticket-form .form__fieldset .field .textarea {
      height: calc(48px * 4);
      padding: 15px; }
    .create-ticket-form .form__fieldset .field .label--special {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      width: calc(330px / 2);
      margin: auto 0;
      font-size: 14px;
      font-weight: 500;
      text-align: center;
      text-transform: uppercase;
      color: #fff; }

.create-ticket-form .form-box + .form-box,
.create-ticket-form .form__content + .form__actions {
  margin-top: 25px; }

/* Layout Definition (base)
   ========================================================================== */
/* ==========================================================================
   Layouts
   ========================================================================== */
.register,
.login {
  background: url("../img/pic_bg-3.jpg") no-repeat;
  background-attachment: fixed;
  background-position: center;
  background-size: cover; }

.sec--head {
  position: fixed;
  z-index: 20;
  right: 0;
  left: 0;
  height: 74px;
  opacity: 1; }
  .sec--head__inner {
    max-width: 1025px;
    height: 100%;
    margin-top: 0;
    padding-top: 0;
    padding-bottom: 0; }
  .sec--head__box {
    flex-grow: 1; }
    .sec--head__box + .sec--head__box {
      justify-content: flex-end; }
  .sec--head.small {
    height: 50px;
    border-bottom: 1px solid #e5e5e5;
    background: rgba(255, 255, 255, 0.9); }
    .sec--head.small.hidden {
      opacity: 0; }
      .sec--head.small.hidden .sec--head__inner {
        margin-top: -50px; }

.sec--main {
  margin-top: 74px;
  margin-bottom: 150px; }
  .sec--main__content .access-box {
    margin-top: 50px; }
  .sec--main .subsec:last-of-type .subsec__inner {
    padding-bottom: 0; }
  .sec--main .sec--main__head + .sec--main__content .access-box {
    margin-top: 0; }

@media (max-width: 767px) {
  .sec--main {
    margin-bottom: 100px; }
    .sec--main__content .access-box {
      margin-top: 5px; } }

.subsec__head .subtitle {
  flex-grow: 1; }

.subsec__head .display-mode-list {
  margin-right: -8px; }
  .subsec__head .display-mode-list__item:last-child .dispaly-mode-box__info {
    right: 0;
    left: -149%; }
    .subsec__head .display-mode-list__item:last-child .dispaly-mode-box__info .tooltip:before {
      right: calc(40px / 5);
      left: auto; }

.subsec__content .project-box {
  width: 100%; }

.subsec .subsec__head + .subsec__content {
  margin-top: 30px; }

@media (max-width: 1100px) {
  .subsec__head {
    flex-wrap: wrap; }
    .subsec__head .subtitle,
    .subsec__head .display-mode-list {
      width: 100%; }
    .subsec__head .display-mode-list {
      justify-content: center; }
      .subsec__head .display-mode-list__item:last-child .dispaly-mode-box__info {
        right: -50%;
        left: -50%; }
        .subsec__head .display-mode-list__item:last-child .dispaly-mode-box__info .tooltip:before {
          right: 0;
          left: 0; }
    .subsec__head .subtitle + .display-mode-list {
      margin-top: 15px; }
  .subsec .subsec__head + .subsec__content {
    margin-top: 25px; } }

@media (max-width: 767px) {
  .subsec .subsec__head + .subsec__content {
    margin-top: 15px; } }

.sec--popup {
  position: absolute;
  z-index: 30;
  top: 0;
  right: 0;
  left: 0;
  width: 100%;
  height: 100%;
  min-height: 100vh;
  background: rgba(0, 0, 0, 0.8); }

/* Layout Components
   ========================================================================== */
/* ==========================================================================
   Components
   ========================================================================== */
@keyframes rotating {
  from {
    transform: rotate(0deg); }
  to {
    transform: rotate(360deg); } }

.rotate {
  -webkit-animation: rotating 1s linear infinite;
  animation-fill-mode: both; }

/* Icons
   ========================================================================== */
.kss-modifier-example .icon {
  font-size: 30px; }

.icon:before {
  margin: 0;
  font-family: "fontello"; }

.icon--resize {
  transform: rotate(-45deg); }

.icon--comment {
  transform: scaleX(-1);
  filter: FlipH; }

.icon--close:before {
  font-family: "fontello";
  content: '\e81d';
  transform: rotate(-45deg); }

/* Breadcrumbs
   ========================================================================== */
.breadcrumb {
  margin: 0;
  font-size: 18px;
  font-weight: 300;
  line-height: 1; }
  .breadcrumb .highlighted {
    font-weight: 700; }

h1.breadcrumb {
  letter-spacing: 1px; }

.breadcrumbs__item {
  position: relative;
  margin-right: calc(30px / 2); }
  .breadcrumbs__item:after {
    margin-left: calc(30px / 2);
    font-family: "fontello";
    font-size: 6px;
    content: '\e803'; }
  .breadcrumbs__item:last-child {
    margin-right: 0; }
    .breadcrumbs__item:last-child:after {
      display: none; }

@media (max-width: 767px) {
  .breadcrumbs__item {
    margin-right: 0; }
    .breadcrumbs__item:after {
      display: none; }
    .breadcrumbs__item:nth-child(n+2) {
      display: none; } }

/* Tooltips
   ========================================================================== */
.tooltip {
  position: relative;
  display: inline-block; }
  .tooltip .label {
    height: 40px;
    margin: 0;
    padding: 0 15px;
    font-size: 11px;
    line-height: 1;
    white-space: nowrap;
    text-transform: uppercase;
    color: #fff;
    background: #000; }
  .tooltip:before {
    position: absolute;
    top: -3px;
    right: 0;
    left: 0;
    height: 4px;
    margin: 0 auto;
    font-family: "fontello";
    font-size: 20px;
    line-height: 5px;
    content: '\e81e';
    color: #000; }
  .tooltip--top:before {
    top: 40px;
    content: '\e81f'; }

.cloud-tooltip-list__item > a {
  display: block;
  width: 100%;
  padding: calc(12px / 2) 12px;
  font-size: 14px;
  line-height: 1;
  color: #404040; }
  .cloud-tooltip-list__item > a:hover {
    text-decoration: none;
    color: #e65962; }

.cloud-tooltip {
  position: relative;
  display: inline-block;
  border: 1px solid #b2b2b2;
  border-radius: 5px;
  background: #fff; }
  .cloud-tooltip__icon {
    position: absolute;
    top: -6px;
    right: 15px;
    overflow: hidden;
    width: 7px;
    height: 6px;
    background: #fff; }
    .cloud-tooltip__icon .icon {
      color: #b2b2b2; }
      .cloud-tooltip__icon .icon:before {
        width: 10px;
        height: 6px;
        margin: 0;
        padding-left: 1px;
        font-size: 16px; }
  .cloud-tooltip__content {
    width: 135px;
    padding: 12px 0; }

/* Links
   ========================================================================== */
.forgot-password-link {
  font-size: 14px;
  font-weight: 300; }

/* Buttons
   ========================================================================== */
.btn--default, .btn--submit {
  width: 330px;
  height: 48px;
  background: #e65962; }
  .btn--default .label, .btn--submit .label {
    width: 100%;
    font-size: 14px;
    font-weight: 500;
    text-align: center;
    text-transform: uppercase;
    color: #fff; }
  .btn--default:hover, .btn--submit:hover {
    text-decoration: none;
    background: #000; }

.btn--submit--small {
  width: calc(330px / 2); }

.user-btn {
  width: 35px;
  height: 35px;
  border-radius: 50%;
  background: #e65962; }
  .user-btn .label {
    font-size: 14px;
    font-weight: 300;
    line-height: 1;
    color: #fff; }
  .user-btn:hover {
    text-decoration: none;
    background: #000; }

.action-btn {
  display: inline-block;
  color: #fff;
  background: #e65962; }
  .action-btn__content {
    height: 44px;
    padding: 0 15px; }
  .action-btn .label {
    font-size: 15px;
    font-weight: 400;
    text-transform: uppercase; }
  .action-btn .icon--folder {
    font-size: 18px; }
  .action-btn .icon--download {
    font-size: 20px; }
  .action-btn .icon--reload {
    font-size: 22px; }
  .action-btn .icon--plus {
    font-size: 28px; }
    .action-btn .icon--plus:before {
      width: 20px; }
  .action-btn .label + .icon {
    margin-left: 15px; }
  .action-btn:hover {
    text-decoration: none;
    background: #000; }

/* Headers
   ========================================================================== */
.main-title,
.subtitle,
.minor-title {
  margin: 0; }
  .main-title.highlighted,
  .subtitle.highlighted,
  .minor-title.highlighted {
    color: #d64650; }

.main-title .label,
.subtitle .label {
  font-weight: 100; }

.main-title {
  overflow: hidden;
  text-align: center;
  white-space: nowrap;
  text-overflow: ellipsis; }
  .main-title .label {
    font-size: 48px; }

@media (max-width: 1100px) {
  .main-title .label {
    font-size: 25px; } }

@media (max-width: 767px) {
  .main-title .label {
    font-size: 20px; } }

.subtitle .label {
  font-size: 30px; }

@media (max-width: 1100px) {
  .subtitle {
    text-align: center; }
    .subtitle .label {
      font-size: 20px; } }

.page-back {
  position: relative;
  margin: 0;
  line-height: 1.2; }
  .page-back__content {
    width: 100%; }
    .page-back__content .main-title {
      position: relative;
      color: #000; }
      .page-back__content .main-title:before {
        right: 0;
        bottom: -10px;
        left: 0;
        height: 1px;
        margin: 0 auto;
        opacity: 0;
        background: #404040; }
    .page-back__content .icon--open-big--left {
      color: #7f7f7f; }
      .page-back__content .icon--open-big--left:before {
        margin: 0;
        justify-content: flex-start; }
    .page-back__content:hover {
      text-decoration: none; }
      .page-back__content:hover .main-title:before {
        opacity: 1; }
  .page-back__info {
    position: absolute;
    z-index: 15;
    right: 0;
    left: 0;
    display: none;
    margin: 0 auto; }
    .page-back__info .tooltip {
      margin-top: 25px; }
  .page-back:hover .page-back__info {
    display: flex; }

@media (max-width: 1100px) {
  .page-back__content .icon--open-big--left {
    font-size: 13px; }
  .page-back__info .tooltip {
    margin-top: 15px; } }

@media (max-width: 767px) {
  .page-back__content .icon--open-big--left {
    font-size: 9px; }
  .page-back__info .tooltip {
    margin-top: 12px; } }

/* Labels
   ========================================================================== */
.status-label--new {
  background: #000; }

.status-label--in-progress {
  background: #a96dbc; }

.status-label--qa {
  background: #4f7dc1; }

.status-label--finished,
.status-label--done {
  background: #6dc729; }

.status-label--rejected {
  background: #d64650; }

.extention-label--psd {
  background: #4f7dc1; }

.extention-label--zip {
  background: #a96dbc; }

/* Progress bar
   ========================================================================== */
.progress-bar[value] {
  position: relative;
  display: block;
  overflow: hidden;
  height: 8px;
  color: #d64650;
  border: none;
  border-color: transparent;
  border-bottom: 1px solid #2f2f2f;
  border-radius: 5px;
  outline: none;
  outline-color: transparent;
  background: #000;
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none; }

.progress-bar[value='100'] {
  color: #6dc729;
  border-bottom: none;
  background: transparent; }

.progress-bar[value]::-moz-progress-bar {
  position: relative;
  border-top-left-radius: 5px;
  border-bottom-left-radius: 5px;
  background: linear-gradient(to bottom, #d64650 0%, #c33b44 100%); }

.progress-bar[value='100']::-moz-progress-bar {
  background: linear-gradient(to bottom, #87fb32 0%, #78c33b 100%); }

.progress-bar[value]::-webkit-progress-bar {
  overflow: hidden;
  border-radius: 5px;
  background-color: #000; }

.progress-bar[value='100']::-webkit-progress-bar {
  background: transparent; }

.progress-bar[value]::-webkit-progress-value {
  border-top-left-radius: 5px;
  border-bottom-left-radius: 5px;
  background: linear-gradient(to bottom, #d64650 0%, #c33b44 100%); }

.progress-bar[value='100']::-webkit-progress-value {
  background: linear-gradient(to bottom, #87fb32 0%, #78c33b 100%); }

.progress-bar--alt[value] {
  height: 12px;
  border-bottom: none;
  background: linear-gradient(to bottom, #d9d9d9 0%, #e4e4e4 100%); }

.progress-bar--alt[value]::-webkit-progress-bar {
  background: linear-gradient(to bottom, #d9d9d9 0%, #e4e4e4 100%); }

.progress-bar--alt[value]::-webkit-progress-value {
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px; }

.progress-bar--alt[value]::-moz-progress-bar {
  border-top-right-radius: 5px;
  border-bottom-right-radius: 5px; }

.progress-bar-value {
  margin: 0;
  font-size: 16px;
  font-weight: 300;
  text-align: center; }

.progress-bar-wrapper {
  max-width: 100%;
  flex-wrap: wrap; }
  .progress-bar-wrapper .progress-bar,
  .progress-bar-wrapper .progress-bar-value,
  .progress-bar-wrapper .progress-bar[value] {
    width: 100%; }
  .progress-bar-wrapper .progress-bar + .progress-bar-value {
    margin-top: 15px; }

@media (max-width: 767px) {
  .progress-bar-wrapper .progress-bar + .progress-bar-value {
    margin-top: 10px; } }

/* Update info
   ========================================================================== */
.update-info {
  display: inline-block; }
  .update-info__content {
    justify-content: center; }
  .update-info .label {
    margin: 0;
    padding-top: 2px;
    font-size: 10px;
    text-transform: uppercase; }
    .update-info .label time {
      margin-left: 7px; }
  .update-info .icon--clock {
    font-size: 16px; }
  .update-info .icon + .label {
    margin-left: 5px; }

/* Project headings
   ========================================================================== */
.project-title {
  overflow: hidden;
  margin: 0;
  font-size: 15px;
  font-weight: 300;
  text-align: center; }
  .project-title .label {
    display: block;
    max-width: calc(100% - 1px); }

.templates-info {
  margin: 0;
  font-size: 12px;
  font-weight: 700;
  text-align: center; }
  .templates-info .label {
    text-transform: uppercase; }

.filebox-title {
  margin: 0;
  font-size: 10px;
  font-weight: 700;
  text-transform: uppercase; }

/* Action tools
   ========================================================================== */
.action-tool {
  position: relative;
  display: inline-block; }
  .action-tool__content {
    position: relative;
    z-index: 1;
    height: 52px;
    padding: 0 15px;
    background: #000; }
    .action-tool__content:hover {
      text-decoration: none; }
  .action-tool .icon {
    color: #fff; }
    .action-tool .icon--resize {
      font-size: 14px; }
    .action-tool .icon--picture {
      font-size: 20px; }
    .action-tool .icon--code {
      font-size: 20px; }
    .action-tool .icon--pencil {
      font-size: 20px; }
    .action-tool .icon--trash {
      font-size: 20px; }
    .action-tool .icon--labels {
      font-size: 20px; }
    .action-tool .icon--download {
      font-size: 20px; }
      .action-tool .icon--download:before {
        margin: 0; }
    .action-tool .icon--bug {
      font-size: 22px; }
    .action-tool .icon--file--code,
    .action-tool .icon--file--image {
      font-size: 20px; }
  .action-tool--highlighted .action-tool__content {
    background: #d64650; }
  .action-tool--drag-and-drop .action-tool__content {
    cursor: move; }

.action-tools-list__item {
  position: relative; }
  .action-tools-list__item .action-tool__content {
    position: relative; }
    .action-tools-list__item .action-tool__content:before {
      top: -2px;
      right: 0;
      left: 0;
      width: 100%;
      height: 2px;
      margin: 0 auto;
      background: transparent; }
    .action-tools-list__item .action-tool__content:hover:before {
      background: #fff; }

.action-tools-list .action-tools-list__item + .action-tools-list__item .action-tool {
  border-left: 1px solid #1a1a1a; }
  .action-tools-list .action-tools-list__item + .action-tools-list__item .action-tool--highlighted {
    border-color: #dc626a; }

/* Action tools
   ========================================================================== */
.user-box {
  position: relative; }
  .user-box__content {
    outline: none; }
    .user-box__content .icon {
      font-size: 12px; }
    .user-box__content:hover {
      text-decoration: none;
      outline: none; }
      .user-box__content:hover .user-btn {
        background: #000; }
    .user-box__content:focus {
      outline: none; }
  .user-box__actions {
    position: absolute;
    top: calc(35px + 15px);
    right: 0;
    display: none; }
    .user-box__actions .cloud-tooltip {
      opacity: 0; }
  .user-box.active .user-btn {
    background: #000; }
  .user-box.active .user-box__content .icon--down-micro:before {
    content: '\e81e'; }
  .user-box.active .user-box__actions {
    display: block; }
    .user-box.active .user-box__actions .cloud-tooltip {
      opacity: 1; }

/* Teasers
   ========================================================================== */
.teaser {
  position: relative;
  width: 245px;
  height: 378px;
  border: 3px solid #000;
  background: #121212; }
  .teaser__inner {
    width: 100%;
    height: 100%; }
    .teaser__inner:hover {
      text-decoration: none; }
  .teaser__head {
    position: relative;
    z-index: 2;
    overflow: hidden;
    width: 100%;
    height: 245px; }
    .teaser__head__photo {
      width: 100%;
      height: 100%;
      background-size: cover; }
  .teaser__content {
    position: relative;
    z-index: 3;
    overflow: hidden;
    width: 100%;
    height: calc(378px - 6px - 245px);
    padding: 15px;
    flex-wrap: wrap; }
    .teaser__content .update-info,
    .teaser__content .project-title,
    .teaser__content .templates-info,
    .teaser__content .progress-bar,
    .teaser__content .action-tools-list {
      width: 100%; }
    .teaser__content .update-info,
    .teaser__content .project-title,
    .teaser__content .templates-info {
      color: #fff; }
    .teaser__content .update-info {
      opacity: 0; }
  .teaser__actions {
    position: absolute;
    z-index: 4;
    top: 0;
    right: 0;
    left: 0;
    width: 100%; }
  .teaser .status-label {
    width: calc(245px / 2); }

.action-teaser .teaser__head:after,
.project-teaser .teaser__head:after {
  transition: 400ms ease-in-out, border-radius 400ms linear; }

.action-teaser {
  overflow: hidden;
  cursor: pointer;
  border-color: #e65962;
  background: #fff; }
  .action-teaser label {
    cursor: pointer; }
  .action-teaser .teaser__inner:hover .teaser__head .icon {
    position: relative;
    z-index: 2;
    color: #fff; }
  .action-teaser .teaser__inner:hover .teaser__head:after {
    z-index: 1;
    background: #e65962; }
  .action-teaser .teaser__inner:hover .teaser__content {
    position: relative;
    z-index: 3; }
  .action-teaser .teaser__head .icon {
    font-size: 30px;
    color: #e65962; }
  .action-teaser .teaser__content {
    background: #fff; }
  .action-teaser.active .teaser__head .icon {
    position: relative;
    z-index: 2;
    color: #fff; }
  .action-teaser.active .teaser__head:after {
    z-index: 1;
    background: #e65962; }
  .action-teaser.active .teaser__content {
    position: relative;
    z-index: 3; }

.project-teaser {
  overflow: hidden;
  cursor: pointer;
  border: none; }
  .project-teaser .teaser__head {
    position: relative;
    z-index: 2;
    border: 3px solid #000;
    border-bottom: none; }
  .project-teaser .teaser__content {
    position: absolute;
    z-index: 1;
    right: 0;
    bottom: 0;
    left: 0;
    height: calc(378px - 3px - 245px + 35px);
    margin: 0 auto; }
    .project-teaser .teaser__content .project-title {
      height: 40px; }
  .project-teaser .teaser__inner:hover .teaser__head:after {
    background: rgba(255, 0, 0, 0.4); }
  .project-teaser .teaser__inner:hover .teaser__content {
    height: calc(378px - 245px);
    padding-bottom: calc(12px - 2px); }
    .project-teaser .teaser__inner:hover .teaser__content .update-info {
      opacity: 1; }
    .project-teaser .teaser__inner:hover .teaser__content .project-title {
      height: auto; }

.template-teaser {
  overflow: hidden;
  border: none; }
  .template-teaser .action-tool--highlighted:hover .action-tool__content {
    background: #000; }
  .template-teaser .tooltip .label {
    background: #d64650; }
  .template-teaser .tooltip:before {
    color: #d64650; }
  .template-teaser .project-title {
    padding: 12px; }
  .template-teaser .teaser__head {
    position: relative;
    height: calc(245px + 3px);
    border: 3px solid #000;
    border-bottom: none; }
    .template-teaser .teaser__head .action-tool--highlighted:hover .tooltip:before {
      color: #000; }
    .template-teaser .teaser__head .action-tool--highlighted:hover .tooltip .label {
      background: #000; }
    .template-teaser .teaser__head .action-tools-list {
      position: absolute;
      z-index: -1;
      top: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      margin: auto 0;
      opacity: 0;
      justify-content: center; }
  .template-teaser .teaser__content {
    height: calc(378px - 6px - 245px + 52px);
    padding: 0;
    align-content: space-between; }
    .template-teaser .teaser__content .project-title {
      height: calc(378px - 3px - 245px);
      padding: 15px; }
    .template-teaser .teaser__content .action-tools-list {
      z-index: -1;
      width: 100%;
      opacity: 0; }
      .template-teaser .teaser__content .action-tools-list__item {
        width: 25%;
        flex-grow: 1; }
        .template-teaser .teaser__content .action-tools-list__item .action-tool {
          width: 100%;
          flex-grow: 1; }
          .template-teaser .teaser__content .action-tools-list__item .action-tool__info {
            top: 0;
            bottom: auto; }
            .template-teaser .teaser__content .action-tools-list__item .action-tool__info .tooltip {
              margin-top: 0;
              margin-top: calc(-40px - 15px); }
        .template-teaser .teaser__content .action-tools-list__item:first-child .action-tool__info {
          right: auto;
          left: 0; }
          .template-teaser .teaser__content .action-tools-list__item:first-child .action-tool__info .tooltip:before {
            right: auto;
            left: calc(40px / 2); }
        .template-teaser .teaser__content .action-tools-list__item:last-child .action-tool__info {
          right: -22px;
          left: -50%; }
          .template-teaser .teaser__content .action-tools-list__item:last-child .action-tool__info .tooltip:before {
            right: calc(40px / 2);
            left: auto; }
  .template-teaser .teaser__actions {
    top: 0;
    left: auto;
    overflow: hidden;
    width: 100%;
    margin-bottom: calc(-40px - 15px);
    margin-left: -44px;
    padding-bottom: calc(40px + 15px);
    justify-content: flex-end; }
    .template-teaser .teaser__actions .action-tool {
      opacity: 0; }
      .template-teaser .teaser__actions .action-tool__content {
        width: 44px;
        height: 44px;
        padding: 0;
        padding-right: 2px;
        padding-bottom: 2px;
        cursor: move; }
        .template-teaser .teaser__actions .action-tool__content .icon--resize {
          font-size: 15px; }
        .template-teaser .teaser__actions .action-tool__content:hover {
          background: #d64650; }
      .template-teaser .teaser__actions .action-tool__info {
        right: auto;
        left: 0; }
        .template-teaser .teaser__actions .action-tool__info .tooltip:before {
          right: auto;
          left: calc(40px / 2); }
  .template-teaser:hover .teaser__head .action-tools-list,
  .template-teaser:focus .teaser__head .action-tools-list {
    z-index: 1;
    opacity: 1; }
  .template-teaser:hover .teaser__content,
  .template-teaser:focus .teaser__content {
    height: calc(378px - 3px - 245px); }
    .template-teaser:hover .teaser__content .project-title,
    .template-teaser:focus .teaser__content .project-title {
      height: calc(378px - 3px - 245px - 52px); }
    .template-teaser:hover .teaser__content .action-tools-list,
    .template-teaser:focus .teaser__content .action-tools-list {
      z-index: 2;
      opacity: 1; }
  .template-teaser:hover .teaser__actions,
  .template-teaser:focus .teaser__actions {
    margin-left: 0; }
    .template-teaser:hover .teaser__actions .action-tool,
    .template-teaser:focus .teaser__actions .action-tool {
      opacity: 1; }
  .template-teaser--alt .teaser__content {
    height: calc(378px - 3px - 245px); }
    .template-teaser--alt .teaser__content .project-title {
      height: calc(378px - 3px - 245px); }
      .template-teaser--alt .teaser__content .project-title .label {
        -webkit-line-clamp: 4; }
  .template-teaser--alt:hover .teaser__content .project-title {
    height: calc(378px - 3px - 245px); }

.teasers-list {
  margin-right: -15px;
  margin-bottom: -15px;
  flex-wrap: wrap; }
  .teasers-list__item, .teasers-list > li {
    margin-right: 15px;
    margin-bottom: 15px; }
  .teasers-list .drag-and-drop-placeholder {
    width: 245px;
    height: 378px;
    border: 3px dotted #d64650;
    background: rgba(214, 70, 80, 0.5); }

@media (max-width: 1100px) {
  .teasers-list {
    width: calc(3* 245px + 3* 15px); } }

@media (max-width: 860px) {
  .teasers-list {
    width: calc(2 * 245px + 2* 15px); } }

@media (max-width: 540px) {
  .teasers-list {
    width: calc(245px + 15px); } }

/* Files
   ========================================================================== */
.file-size,
.file-date {
  margin: 0;
  font-size: 14px;
  font-weight: 300; }

.ticket-desc > p {
  text-transform: uppercase; }

.kss-modifier-example .file-data {
  width: 100%; }

.file-data {
  color: #404040; }
  .file-data__inner {
    width: 100%;
    height: 44px; }
    .file-data__inner:hover {
      text-decoration: none; }
  .file-data__name,
  .file-data__extention,
  .file-data__size,
  .file-data__uploaded-date,
  .file-data__actions,
  .file-data__status,
  .file-data__create-date,
  .file-data__finish-date,
  .file-data__comments,
  .file-data__ticket-date {
    height: 100%; }
  .file-data__extention,
  .file-data__size,
  .file-data__uploaded-date,
  .file-data__actions,
  .file-data__status,
  .file-data__create-date,
  .file-data__finish-date {
    flex-shrink: 0; }
  .file-data__name,
  .file-data__size,
  .file-data__uploaded-date,
  .file-data__create-date,
  .file-data__finish-date,
  .file-data__comments,
  .file-data__ticket-date {
    padding: 0 15px;
    border: 1px solid #b2b2b2; }
  .file-data__name,
  .file-data__size,
  .file-data__uploaded-date,
  .file-data__create-date,
  .file-data__comments {
    border-right: none; }
  .file-data__size,
  .file-data__uploaded-date,
  .file-data__create-date,
  .file-data__finish-date,
  .file-data__comments,
  .file-data__ticket-date {
    border-left: none; }
  .file-data__status,
  .file-data__comments,
  .file-data__ticket-date {
    width: 120px; }
  .file-data__name {
    min-width: 265px;
    max-width: calc(100% - 80px - 135px - 140px - 101px);
    flex-grow: 1; }
    .file-data__name .project-title {
      overflow: hidden;
      width: 100%;
      max-width: 100%;
      text-align: left;
      white-space: nowrap;
      text-overflow: ellipsis; }
      .file-data__name .project-title .label {
        overflow: hidden;
        text-align: left;
        white-space: nowrap;
        text-overflow: ellipsis; }
  .file-data__extention {
    width: 80px; }
    .file-data__extention .extention-label {
      width: 100%; }
  .file-data__size,
  .file-data__create-date,
  .file-data__finish-date {
    width: 135px; }
  .file-data__size,
  .file-data__create-date {
    padding-left: 40px; }
  .file-data__uploaded-date {
    width: 140px; }
  .file-data__comments {
    justify-content: center; }
  .file-data__actions {
    width: 101px; }
    .file-data__actions .action-tools-list {
      height: 100%; }
      .file-data__actions .action-tools-list__item {
        height: 100%; }
        .file-data__actions .action-tools-list__item:last-child .action-tool__info {
          right: -7px;
          left: -50%; }
          .file-data__actions .action-tools-list__item:last-child .action-tool__info .tooltip:before {
            right: calc(40px / 2);
            left: auto; }
    .file-data__actions .action-tool__content {
      height: 44px; }
      .file-data__actions .action-tool__content .icon:before {
        margin: 0; }
      .file-data__actions .action-tool__content:hover {
        background: #d64650; }
        .file-data__actions .action-tool__content:hover:before {
          display: none; }
    .file-data__actions .action-tool--highlighted .action-tool__content:hover {
      background: #000; }
  .file-data__status .status-label {
    width: 100%; }
    .file-data__status .status-label .label {
      width: 100%; }
  .file-data--project .file-data__name {
    max-width: calc(100% - 120px - 135px - 135px); }
  .file-data--template .file-data__uploaded-date,
  .file-data--template-complexe .file-data__uploaded-date {
    padding-left: 30px; }
  .file-data--template .file-data__name {
    max-width: calc(100% - 120px - 140px - 101px); }
  .file-data--template .file-data__actions .action-tools-list__item:last-child .action-tool__info {
    right: -15px; }
  .file-data--template-complexe .file-data__name {
    max-width: calc(100% - 120px - 140px - 284px); }
  .file-data--template-complexe .file-data__actions {
    width: 284px; }
    .file-data--template-complexe .file-data__actions .icon--bug {
      width: 16px; }
    .file-data--template-complexe .file-data__actions .icon--pencil {
      width: 13px; }
    .file-data--template-complexe .file-data__actions .icon--trash {
      width: 16px; }
  .file-data--tickets .file-data__inner {
    height: 65px; }
  .file-data--tickets .file-data__status {
    align-items: stretch;
    align-content: stretch; }
    .file-data--tickets .file-data__status .status-label .label {
      height: auto; }
  .file-data--tickets .file-data__comments {
    padding: 10px 15px 13px; }
  .file-data--tickets .file-data__name {
    max-width: calc(100% - 120px - 120px - 120px); }

@media (max-width: 913px) {
  .file-data__actions .action-tool:hover .action-tool__info {
    display: none; } }

.files-list {
  margin-bottom: -15px;
  counter-reset: li; }
  .files-list__item, .files-list > li {
    margin-bottom: 15px; }
    .files-list__item a.files-list__item__inner:hover, .files-list > li a.files-list__item__inner:hover {
      text-decoration: none; }
      .files-list__item a.files-list__item__inner:hover .files-list__item__counter,
      .files-list__item a.files-list__item__inner:hover .files-list__item__id, .files-list > li a.files-list__item__inner:hover .files-list__item__counter,
      .files-list > li a.files-list__item__inner:hover .files-list__item__id {
        border-color: #e65962; }
      .files-list__item a.files-list__item__inner:hover .files-list__item__counter, .files-list > li a.files-list__item__inner:hover .files-list__item__counter {
        border-color: #e65962; }
        .files-list__item a.files-list__item__inner:hover .files-list__item__counter:after, .files-list > li a.files-list__item__inner:hover .files-list__item__counter:after {
          background: #e65962; }
        .files-list__item a.files-list__item__inner:hover .files-list__item__counter:before, .files-list > li a.files-list__item__inner:hover .files-list__item__counter:before {
          color: #fff; }
      .files-list__item a.files-list__item__inner:hover .files-list__item__content .file-data, .files-list > li a.files-list__item__inner:hover .files-list__item__content .file-data {
        color: red; }
        .files-list__item a.files-list__item__inner:hover .files-list__item__content .file-data__name,
        .files-list__item a.files-list__item__inner:hover .files-list__item__content .file-data__create-date,
        .files-list__item a.files-list__item__inner:hover .files-list__item__content .file-data__finish-date, .files-list > li a.files-list__item__inner:hover .files-list__item__content .file-data__name,
        .files-list > li a.files-list__item__inner:hover .files-list__item__content .file-data__create-date,
        .files-list > li a.files-list__item__inner:hover .files-list__item__content .file-data__finish-date {
          border-color: #e65962; }
    .files-list__item__inner, .files-list > li__inner {
      width: 100%; }
    .files-list__item__id,
    .files-list__item__counter, .files-list > li__id,
    .files-list > li__counter {
      overflow: hidden;
      border: 1px solid #b2b2b2;
      flex-shrink: 0; }
    .files-list__item__id, .files-list > li__id {
      width: 54px;
      height: 65px;
      justify-content: center; }
      .files-list__item__id .ticket-id-link, .files-list > li__id .ticket-id-link {
        position: relative;
        width: 100%;
        color: #404040; }
        .files-list__item__id .ticket-id-link:hover, .files-list > li__id .ticket-id-link:hover {
          text-decoration: none;
          color: #fff; }
          .files-list__item__id .ticket-id-link:hover:after, .files-list > li__id .ticket-id-link:hover:after {
            z-index: -1;
            background: #e65962; }
    .files-list__item__counter, .files-list > li__counter {
      position: relative;
      width: 44px;
      height: 44px; }
      .files-list__item__counter:after, .files-list > li__counter:after {
        z-index: 1; }
      .files-list__item__counter:before, .files-list > li__counter:before {
        z-index: 2;
        font-size: 14px;
        font-weight: 300;
        content: counter(li);
        counter-increment: li;
        transition: 200ms ease-in-out, border-radius 200ms linear;
        color: #404040; }
    .files-list__item__content, .files-list > li__content {
      width: calc(100% - 44px);
      max-width: calc(100% - 44px); }
      .files-list__item__content .file-data, .files-list > li__content .file-data {
        width: 100%; }
        .files-list__item__content .file-data__name, .files-list > li__content .file-data__name {
          border-left: none; }
  .files-list .drag-and-drop-placeholder {
    width: 100%;
    height: 44px;
    border: 1px dashed #d64650;
    background: rgba(214, 70, 80, 0.5); }

.files-box {
  overflow-x: hidden;
  overflow-y: hidden;
  width: 100%;
  margin-bottom: calc(-40px - 15px);
  padding-bottom: calc(40px + 15px); }
  .files-box__head {
    height: 44px; }
  .files-box__name,
  .files-box__extention,
  .files-box__size,
  .files-box__uploaded-date,
  .files-box__actions,
  .files-box__status,
  .files-box__create-date,
  .files-box__finish-date {
    height: 100%; }
  .files-box__extention,
  .files-box__size,
  .files-box__uploaded-date,
  .files-box__actions,
  .files-box__status,
  .files-box__create-date,
  .files-box__finish-date {
    flex-shrink: 0; }
  .files-box__extention,
  .files-box__name,
  .files-box__size,
  .files-box__uploaded-date,
  .files-box__actions,
  .files-box__create-date,
  .files-box__finish-date,
  .files-box__status,
  .files-box__comments,
  .files-box__ticket-date {
    padding: 0 15px; }
  .files-box__extention,
  .files-box__status,
  .files-box__actions,
  .files-box__comments {
    justify-content: center; }
    .files-box__extention .filebox-title,
    .files-box__status .filebox-title,
    .files-box__actions .filebox-title,
    .files-box__comments .filebox-title {
      text-align: center; }
  .files-box__number,
  .files-box__id {
    width: 44px;
    flex-shrink: 0; }
    .files-box__number .filebox-title,
    .files-box__id .filebox-title {
      text-align: center; }
  .files-box__number {
    width: 44px; }
  .files-box__id {
    width: 54px; }
  .files-box__name {
    min-width: 265px;
    max-width: calc(100% - 44px - 80px - 135px - 140px - 101px);
    padding: 0 15px;
    flex-grow: 1; }
  .files-box__extention {
    width: 80px; }
  .files-box__size,
  .files-box__create-date,
  .files-box__finish-date {
    width: 135px; }
  .files-box__size,
  .files-box__create-date {
    padding-left: 40px; }
  .files-box__status,
  .files-box__comments,
  .files-box__ticket-date {
    width: 120px; }
  .files-box__uploaded-date {
    width: 140px; }
  .files-box__actions {
    width: 101px;
    padding: 0; }
    .files-box__actions .filebox-title {
      padding: 0 15px;
      flex-grow: 1; }
  .files-box--projects .files-box__name {
    max-width: calc(100% - 44px - 120px - 135px - 135px); }
  .files-box--templates .files-box__uploaded-date,
  .files-box--templates-complexe .files-box__uploaded-date {
    padding-left: 30px; }
  .files-box--templates .files-box__name {
    max-width: calc(100% - 44px - 120px - 140px - 101px); }
  .files-box--templates-complexe .files-box__name {
    max-width: calc(100% - 44px - 120px - 140px - 284px); }
  .files-box--templates-complexe .files-box__actions {
    width: 284px; }
  .files-box--tickets .files-box__name {
    max-width: calc(100% - 54px - 120px - 120px - 120px); }

@media (max-width: 913px) {
  .files-box--templates-complexe {
    overflow-x: scroll !important;
    margin-bottom: -15px;
    padding-bottom: 15px; }
    .files-box--templates-complexe::-webkit-scrollbar {
      -webkit-appearance: none; }
    .files-box--templates-complexe::-webkit-scrollbar:horizontal {
      height: 12px; }
    .files-box--templates-complexe::-webkit-scrollbar:vertical {
      display: none; }
    .files-box--templates-complexe::-webkit-scrollbar-thumb {
      border-radius: 5px;
      background: linear-gradient(to bottom, #3f3f3f 0%, #0e0e0e 100%); }
    .files-box--templates-complexe::-webkit-scrollbar-track {
      border-radius: 5px;
      background: linear-gradient(to bottom, #d9d9d9 0%, #e4e4e4 100%); } }

@media (max-width: 860px) {
  .files-box {
    margin-bottom: -15px;
    padding-bottom: 15px; }
    .files-box::-webkit-scrollbar {
      -webkit-appearance: none; }
    .files-box::-webkit-scrollbar:horizontal {
      height: 12px; }
    .files-box::-webkit-scrollbar:vertical {
      display: none; }
    .files-box::-webkit-scrollbar-thumb {
      border-radius: 5px;
      background: linear-gradient(to bottom, #3f3f3f 0%, #0e0e0e 100%); }
    .files-box::-webkit-scrollbar-track {
      border-radius: 5px;
      background: linear-gradient(to bottom, #d9d9d9 0%, #e4e4e4 100%); } }

@media (max-width: 825px) {
  .files-box {
    overflow-x: scroll; }
    .files-box--projects,
    .files-box--templates,
    .files-box--tickets {
      overflow-x: hidden; } }

@media (max-width: 728px) {
  .files-box--projects {
    overflow-x: scroll; } }

@media (max-width: 708px) {
  .files-box--tickets {
    overflow-x: scroll; } }

@media (max-width: 700px) {
  .files-box--templates {
    overflow-x: scroll; } }

/* Pagination
   ========================================================================== */
.pagination--prev .icon,
.pagination--next .icon {
  position: relative;
  z-index: 2;
  font-size: 20px; }

.pagination .counter {
  position: relative;
  z-index: 2;
  font-size: 16px;
  font-weight: 400; }

.pagination__content {
  position: relative;
  overflow: hidden;
  width: 44px;
  height: 44px;
  color: #b2b2b2;
  border: 1px solid #b2b2b2;
  background: #fff; }
  .pagination__content:after {
    z-index: 1; }

.pagination__content:hover {
  text-decoration: none;
  color: #fff;
  border-color: #e65962; }
  .pagination__content:hover:after {
    background: #e65962; }

.pagination-list {
  counter-reset: li; }
  .pagination-list__item {
    margin-right: 15px; }
    .pagination-list__item:last-child {
      margin-right: 0; }
    .pagination-list__item .pagination__content .counter:before {
      content: counter(li);
      counter-increment: li; }
    .pagination-list__item.active .pagination__content {
      color: #e65962;
      border-color: #e65962; }
      .pagination-list__item.active .pagination__content:hover {
        color: #fff; }

.kss-modifier-example .pagination-box .pagination--prev,
.kss-modifier-example .pagination-box .pagination--next {
  position: static; }

.kss-modifier-example .pagination-box .pagination--prev + .pagination-list,
.kss-modifier-example .pagination-box .pagination-list + .pagination--next {
  margin-left: 15px; }

.pagination-box {
  position: relative; }
  .pagination-box .pagination--prev,
  .pagination-box .pagination--next {
    position: absolute;
    top: 0;
    bottom: 0;
    display: none;
    margin: auto 0; }
  .pagination-box.prev-active .pagination--prev {
    left: calc(-44px - 15px);
    display: block; }
  .pagination-box.next-active .pagination--next {
    right: calc(-44px - 15px);
    display: block; }

/* Project dates
   ========================================================================== */
.project-time__head,
.project-time__info-add {
  display: block;
  margin: 0;
  line-height: 1; }

.project-time__head {
  font-size: 48px;
  font-weight: 300;
  color: #000; }

.project-time__info-add {
  font-size: 10px;
  font-weight: 700;
  text-transform: uppercase;
  color: #7f7f7f; }

.project-time .project-time__head + .project-time__info-add {
  margin-top: 5px; }

@media (max-width: 1100px) {
  .project-time__head {
    font-size: 35px; } }

@media (max-width: 767px) {
  .project-time__head {
    font-size: 25px; } }

@media (max-width: 540px) {
  .project-time__head,
  .project-time__info-add {
    width: 100%;
    text-align: center; } }

.project-time-list__item {
  margin-right: 50px; }
  .project-time-list__item:last-child {
    margin-right: 0; }

@media (max-width: 540px) {
  .project-time-list {
    margin-bottom: -30px;
    flex-wrap: wrap; }
    .project-time-list__item {
      width: 100%;
      margin-right: 0;
      margin-bottom: 30px; } }

/* Project-box
   ========================================================================== */
.project-box__content .files-box {
  width: 100%; }

.project-box__actions {
  justify-content: flex-start; }
  .project-box__actions .pagination-box {
    margin-right: auto;
    margin-left: auto; }

.project-box .project-box__content + .project-box__actions {
  margin-top: 44px; }

@media (max-width: 1100px) {
  .project-box__content,
  .project-box__actions {
    justify-content: center; } }

@media (max-width: 767px) {
  .project-box .action-btn {
    width: 100%; } }

/* Project essential box
   ========================================================================== */
.project-essential-box__head,
.project-essential-box__content {
  position: relative; }

.project-essential-box__head {
  z-index: 2; }

.project-essential-box__content {
  z-index: 1; }

.project-essential-box .project-essential-box__head + .project-essential-box__content {
  margin-top: 44px; }

@media (max-width: 1100px) {
  .project-essential-box .project-essential-box__head + .project-essential-box__content {
    margin-top: 25px; } }

@media (max-width: 767px) {
  .project-essential-box .project-essential-box__head + .project-essential-box__content {
    margin-top: 15px; } }

/* Acces tools
   ========================================================================== */
.access-tool {
  position: relative;
  display: inline-block;
  border: 1px solid #c4c4c4; }
  .access-tool__content {
    position: relative;
    z-index: 1;
    width: 40px;
    height: 35px;
    background: #fff; }
    .access-tool__content:hover {
      text-decoration: none; }
  .access-tool .icon {
    color: #7f7f7f; }
    .access-tool .icon--key {
      font-size: 14px; }
    .access-tool .icon--lock {
      font-size: 18px; }
  .access-tool:hover .access-tool__content {
    background: #e5e5e5; }

.access-tools-list__item + .access-tools-list__item .access-tool {
  border-left: none; }

.access-tools-list__item.active .access-tool__content {
  background: #e5e5e5; }

.form-info {
  overflow: hidden;
  width: 330px; }
  .form-info > p {
    margin: 0;
    font-size: 12px;
    text-align: center;
    text-transform: uppercase; }
  .form-info.required {
    color: #e65962; }

@media (max-width: 767px) {
  .form-info {
    width: 100%; }
    .form-info > p {
      font-size: 11px; } }

.access-box .access-box__head + .access-box__content {
  margin-top: 48px; }

/* Display mode
   ========================================================================== */
.dispaly-mode {
  display: inline-block; }
  .dispaly-mode__content {
    overflow: hidden;
    width: 40px;
    color: #c4c4c4; }
    .dispaly-mode__content:hover {
      text-decoration: none;
      color: #000; }
  .dispaly-mode .icon {
    height: 35px; }
    .dispaly-mode .icon:before {
      width: auto;
      margin: 0; }
    .dispaly-mode .icon--display-mode {
      font-size: 45px; }
      .dispaly-mode .icon--display-mode--alt {
        font-size: 41px; }

@media (max-width: 1100px) {
  .dispaly-mode .icon--display-mode {
    font-size: 38px; }
    .dispaly-mode .icon--display-mode--alt {
      font-size: 35px; } }

.dispaly-mode-box {
  position: relative;
  display: inline-block; }
  .dispaly-mode-box__info {
    position: absolute;
    right: -50%;
    bottom: 0;
    left: -50%;
    display: none;
    height: 1px;
    opacity: 0; }
    .dispaly-mode-box__info .tooltip {
      margin-top: 15px; }
  .dispaly-mode-box:hover .dispaly-mode-box__info {
    display: flex;
    opacity: 1; }

.display-mode-list {
  position: relative;
  z-index: 10; }
  .display-mode-list__item {
    margin-right: 3px; }
    .display-mode-list__item:last-child {
      margin-right: 0; }
    .display-mode-list__item.active .dispaly-mode__content {
      color: #e65962; }

/* Upload box
   ========================================================================== */
.upload-box {
  display: inline-block; }
  .upload-box__content {
    flex-wrap: wrap; }
    .upload-box__content__head,
    .upload-box__content__info-add {
      width: 100%; }
    .upload-box__content__head .icon {
      position: relative;
      z-index: 2;
      color: #e65962; }
      .upload-box__content__head .icon--folder--alt {
        width: 75px;
        height: 60px;
        font-size: 60px; }
        .upload-box__content__head .icon--folder--alt:before {
          width: 100%;
          height: 100%;
          margin: 0; }
    .upload-box__content__head .icon-wrapper {
      position: relative;
      height: 60px; }
      .upload-box__content__head .icon-wrapper .qty {
        position: absolute;
        z-index: -1;
        top: 31px;
        right: 3px;
        overflow: hidden;
        width: 30px;
        height: 27px;
        font-weight: 600;
        color: #e65962; }
    .upload-box__content__info-add > p {
      margin: 0;
      text-transform: uppercase; }
    .upload-box__content:hover {
      text-decoration: none; }
      .upload-box__content:hover .upload-box__content__head .icon {
        color: #000; }
      .upload-box__content:hover .upload-box__content__head .icon-wrapper .qty {
        color: #000; }
  .upload-box .upload-box__content__head + .upload-box__content__info-add {
    margin-top: 15px; }

/* Comment box
   ========================================================================== */
.comment-box {
  width: 40px;
  height: 40px; }
  .comment-box__content {
    position: relative;
    width: 100%;
    height: 100%; }
    .comment-box__content .icon {
      position: relative;
      z-index: 1;
      color: #e65962; }
      .comment-box__content .icon--comment {
        width: 100%;
        height: 100%;
        font-size: 40px; }
        .comment-box__content .icon--comment:before {
          padding-top: 5px;
          padding-left: 2px; }
    .comment-box__content .qty {
      z-index: 2;
      width: 100%;
      height: 100%;
      font-size: 11px;
      font-weight: 600;
      color: #fff; }

/* Popup
   ========================================================================== */
.trigger-close-popup {
  overflow: hidden;
  width: 30px;
  height: 30px;
  border: 1px solid #e65962; }
  .trigger-close-popup .icon {
    font-size: 16px;
    color: #d64650; }
  .trigger-close-popup:hover {
    text-decoration: none; }
    .trigger-close-popup:hover .icon {
      position: relative;
      z-index: 2;
      color: #fff; }
    .trigger-close-popup:hover:after {
      z-index: 1;
      background: #e65962; }

.popup {
  width: 1025px;
  background: #fff; }
  .popup__inner {
    padding: calc(25px * 1.2) 25px; }
  .popup__head .subtitle {
    margin-top: -8px; }
  .popup__head + .popup__content {
    margin-top: calc(25px - 8px); }

/* Vendor CSS
   ========================================================================== */
/* ==========================================================================
   Vendor
   ========================================================================== */
/* owlCarousel
   ========================================================================== */
/* Media Queries
   ========================================================================== */
/* ==========================================================================
   Media Queries
   ========================================================================== */
/* Breakpoints link for JS
   https://www.lullabot.com/articles/importing-css-breakpoints-into-javascript/ 
*/
body:before {
  content: "smartphone";
  display: none; }

@media (min-width: 700px) {
  body:before {
    content: "tablet"; } }

@media (min-width: 1100px) {
  body:before {
    content: "desktop"; } }

/* Desktop
   ========================================================================== */
/* Print Styles
   ========================================================================== */
/* ==========================================================================
   Print Styles
   ========================================================================== */

/*# sourceMappingURL=data:application/json;base64, */
