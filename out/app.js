!function(){"use strict";var t=angular.module("frontendApp",["ui.router","ngAnimate","offClick","authModule","panelModule"]);t.config(["$urlRouterProvider","$locationProvider",function(t){t.otherwise("/auth/login")}]).run(["$state","$rootScope",function(t,e){t.go("accountState.login"),e.$on("$stateChangeSuccess",function(t,r){e.pageName=r.pageName,e.module=r.module,e.trails=r.trails,e.isAuth="auth"===r.module}),e.communicator={}}])}(),function(){"use strict";var t=angular.module("authModule",[]);t.config(["$stateProvider",function(t){t.state("accountState",{url:"/auth",templateUrl:"partials/templates/auth/account.html",controller:"AccountCtrl",controllerAs:"AC",pageName:"Account",module:"auth"}).state("accountState.login",{url:"/login",templateUrl:"partials/templates/auth/login.html",controller:"LoginCtrl",controllerAs:"LC",pageName:"Login",module:"auth"}).state("accountState.register",{url:"/register",templateUrl:"partials/templates/auth/registration.html",controller:"RegistrationCtrl",controllerAs:"RC",pageName:"Register",module:"auth"}).state("accountState.remindState",{url:"/remind",templateUrl:"partials/templates/auth/remind.html",controller:"RemindCtrl",controllerAs:"RmC",pageName:"Remind Password",module:"auth",showit:!0})}])}(),function(){"use strict";var t=angular.module("panelModule",[]);t.config(["$stateProvider",function(t){t.state("myProjectsState",{url:"/my-projects",templateUrl:"partials/templates/panel/myProjects.html",controller:"MyProjectsCtrl",controllerAs:"MPC",pageName:"My Projects",module:"panel"}).state("allProjectsState",{url:"/all-projects",templateUrl:"partials/templates/panel/allProjects.html",controller:"AllProjectsCtrl",controllerAs:"APC",pageName:"All Projects",module:"panel",trails:[{name:"My Projects",link:"#/my-projects"}]}).state("projectState",{url:"/project/:projectId",templateUrl:"partials/templates/panel/project.html",controller:"ProjectCtrl",controllerAs:"PC",pageName:"Project",module:"panel"})}])}(),function(){"use strict";var t=function(t,e,r){function n(){t.showit=r.showit}("/account"===e.current.url||"/auth"===e.current.url)&&e.go("accountState.login"),n()};t.$inject=["$scope","$state","$stateParams"],angular.module("frontendApp").controller("AccountCtrl",t)}(),function(){"use strict";var t=function(t,e){t.submitForm=function(){e.go("myProjectsState")}};t.$inject=["$scope","$state"],angular.module("frontendApp").controller("LoginCtrl",t)}(),function(){"use strict";var t=function(t){};t.$inject=["$scope"],angular.module("frontendApp").controller("RegistrationCtrl",t)}(),function(){"use strict";var t=function(t){};t.$inject=["$scope"],angular.module("frontendApp").controller("RemindCtrl",t)}(),function(){"use strict";angular.module("frontendApp").value("appSettings",{title:"Customers Application",verion:"0.0.1",apiRoot:"http://localhost:8080/"})}(),function(){"use strict";var t=function(t,e){function r(){e.getProjects().success(function(e){t.allProjects=e,console.log(e)}).error(function(t){console.log(t)})}t.allProjects=null,r()};t.$inject=["$scope","projectsFactory"],angular.module("frontendApp").controller("AllProjectsCtrl",t)}(),function(){"use strict";var t=function(t,e){function r(){e.getProjects().success(function(e){t.myProjects=e,console.log(e)}).error(function(t){console.log(t)})}t.myProjects=null,r()};t.$inject=["$scope","projectsFactory"],angular.module("frontendApp").controller("MyProjectsCtrl",t)}(),function(){"use strict";var t=function(t,e,r,n){t.project=null,t.getStatus=function(t){return n.getStatus(t)},r.getProject(e.projectId).success(function(e){t.project=e}).error(function(){})};t.$inject=["$scope","$stateParams","projectsFactory","statusService"],angular.module("frontendApp").controller("ProjectCtrl",t)}(),function(){"use strict";var t=function(t,e){return{getProjects:function(){return t.get(e.apiRoot+"projects/")},getProject:function(r){return t.get(e.apiRoot+"projects/"+r)}}};t.$inject=["$http","appSettings"],angular.module("frontendApp").factory("projectsFactory",t)}(),function(){"use strict";var t=function(){this.getStatus=function(t){var e={code:t,className:"",labelContent:""};switch(t){case 0:e.className="finished",e.labelContent="Complete";break;case 1:e.className="in-progress",e.labelContent="In Progress";break;case 2:e.className="qa",e.labelContent="Q&A";break;case 3:e.className="rejected",e.labelContent="Rejected";break;case 4:e.className="new",e.labelContent="New"}return e}};angular.module("frontendApp").service("statusService",t)}(),function(){"use strict";var t=function(){return{restrict:"E",templateUrl:"app/common/directives/header/headerSection.html",link:function(t){t.menuVisible=!1,t.toggleMenu=function(){t.menuVisible=!t.menuVisible},t.hideMenu=function(){t.menuVisible=!1}}}};t.$inject=[],angular.module("frontendApp").directive("headerSection",t)}(),function(){"use strict";var t=function(){return{restrict:"E",templateUrl:"app/auth/directives/authHeaders/authHeaders.html"}};t.$inject=[],angular.module("frontendApp").directive("authHeaders",t)}(),function(){"use strict";var t=function(t){return{link:function(e,r,n){angular.element(t).bind("scroll",function(){console.log("dummy-text"),e.$apply()})}}};t.$inject=["$window"],angular.module("frontendApp").directive("windowScroll",t)}(),function(){"use strict";var t=function(t){return{restrict:"E",templateUrl:"app/panel/directives/templatePreview/templatePreview.html",link:function(e){e.projectStatus=t.getStatus(e.template.statusCode)}}};t.$inject=["statusService"],angular.module("frontendApp").directive("templatePreview",t)}();
//# sourceMappingURL=data:application/json;base64,
